(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{361:function(t,e,a){"use strict";a.r(e);var n=a(42),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"core"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#core"}},[t._v("#")]),t._v(" Core")]),t._v(" "),a("h2",{attrs:{id:"replaybg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replaybg"}},[t._v("#")]),t._v(" replayBG")]),t._v(" "),a("div",{staticClass:"language-matlab extra-class"},[a("pre",{pre:!0,attrs:{class:"language-matlab"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replayBG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modality"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" BW"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" saveName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'glucoseModel'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'IG'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sampleTime'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'seed'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("randi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1048576")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'maxETAPerMCMCRun'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'maxMCMCIterations'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'maxMCMCRuns'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'maxMCMCRunsWithMaxETA'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MCMCTheta0Policy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mean'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bayesianEstimator'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mean'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'preFilterData'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'saveChains'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'enableHypoTreatments'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hypoTreatmentsHandler'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'adaHypoTreatmentsHandler'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'enableCorrectionBoluses'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'correctionBolusesHandler'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'correctsAbove250Handler'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'saveSuffix'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'plotMode'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'enableLog'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'verbose'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v('Core function of ReplayBG. It is used to identify ReplayBG model on the\ngiven data or to "replay" specific scenarios specified by the given '),a("code",[t._v("data")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"inputs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),a("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data;")]),t._v(" "),a("li",[a("strong",[t._v("data: timetable, (required)")]),t._v(" "),a("br"),t._v("\nA timetable which contains the data to be used by ReplayBG. MUST contain a column named 'glucose' that contains the glucose measurements (in mg/dl), a column named 'basal' that contains the basal insulin data (in U/min), a column 'bolus' that contains the bolus insulin data (in U/min), a column 'CHO' that contains the CHO intake data (in g/min). "),a("strong",[t._v("data")]),t._v(" MUST be sampled on a homogeneous time grid and MUST not contain Nan values;")]),t._v(" "),a("li",[a("strong",[t._v("BW: double, (required)")]),t._v(" "),a("br"),t._v("\nThe patient body weight (kg);")]),t._v(" "),a("li",[a("strong",[t._v("saveName: vector of char, (required)")]),t._v(" "),a("br"),t._v("\nA vector of characters used to label, thus identify, each output file and result;")]),t._v(" "),a("li",[a("strong",[t._v("glucoseModel: vector of char, {'BG', 'IG'}, default: 'IG'")]),t._v(" "),a("br"),t._v("\nA vector of characters that specifies the glucose model to use. Specifying 'BG', ReplayBG will use the blood glucose as measurement model. Specifying 'IG', ReplayBG will use the interstitial glucose as measurement model;")]),t._v(" "),a("li",[a("strong",[t._v("sampleTime: integer, default: 5")]),t._v(" "),a("br"),t._v("\nAn integer that specifies the sample time (min) of the "),a("strong",[t._v("data")]),t._v(" timetable;")]),t._v(" "),a("li",[a("strong",[t._v("seed: integer, default: randi([1 1048576])")]),t._v(" "),a("br"),t._v("\nAn integer that specifies the random seed. For reproducibility;")]),t._v(" "),a("li",[a("strong",[t._v("maxETAPerMCMCRun: double, default: inf")]),t._v(" "),a("br"),t._v("\nA number that specifies the maximum time (hour) allowed for each MCMC run. Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("maxMCMCIterations: integer, default: inf")]),t._v(" "),a("br"),t._v("\nAn integer that specifies the maximum number of iterations for each MCMC run. Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("maxMCMCRuns: integer, default: inf")]),t._v(" "),a("br"),t._v("\nAn integer that specifies the maximum number of MCMC runs. Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("maxMCMCRunsWithMaxETA: integer, default: 2")]),t._v(" "),a("br"),t._v("\nAn integer that specifies the maximum number of MCMC runs having maximum ETA. Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("adaptiveSCMH: integer, {0, 1}, default: 1")]),t._v(" "),a("br"),t._v("\nA numerical flag that specifies whether to make the Single Components Metropolis Hastings algorithm adaptive or non-adaptive.Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("MCMCTheta0Policy: vector of char, {'mean', 'initial', 'last'}, default: 'mean'")]),t._v(" "),a("br"),t._v("\nA vector of characters defining the policy used by the MCMC procedure to set the initial MCMC chain values. Using 'mean', the mean value of the MCMC chain obtained from the last MCMC run will be set as initial MCMC chain value to be used in the next MCMC run. Using 'last', the last value of the MCMC chain obtained from the last MCMC run will be set as initial MCMC chain value to be used in the next MCMC run. Using 'initial', the same initial value will be used for every run of MCMC. Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("bayesianEstimator: vector of char, {'mean', 'map'}, default: 'mean'")]),t._v(" "),a("br"),t._v("\nA vector of characters defining which Bayesian estimator to use to obtain a point estimate of model parameters. Using 'mean' the posterior mean estimater will be used. Using 'map', the marginalized maximum-a-posteriori estimator will be used. Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("preFilterData: integer, {0, 1}, default: 0")]),t._v(" "),a("br"),t._v("\nA numerical flag that specifies whether to filter the glucose data before performing the model identification or not. This might help the identification procedure. Filtering is performed using a non-causal fourth-order Butterworth filter having 0.1*sampleTime cutOff frequency. Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("saveChains: integer, {0, 1}, default: 1")]),t._v(" "),a("br"),t._v("\nA numerical flag that specifies whether to save the resulting MCMC chains in dedicated files (one for each MCMC run) for future analysis or not. Ignored when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("enableHypoTreatments: integer, {0, 1}, default: 0")]),t._v(" "),a("br"),t._v("\nA numerical flag that specifies whether to enable hypotreatments during the replay of a given scenario. Can be set only when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("hypoTreatmentsHandler: vector of char, default:   'adaHypoTreatmentsHandler'")]),t._v(" "),a("br"),t._v("\nA vector of characters that specifies the name of the function handler that implements an hypotreatment strategy during the replay of a given scenario. The function must have 1 output, i.e., the hypotreatments carbohydrates intake (g/min). The function must accept 6 inputs, i.e., 'G' (mg/dl) the glucose concentration at time(timeIndex), 'CHO' (g/min) a vector that contains the CHO intakes input for the whole replay simulation, 'bolus' (U/min) a vector that contains the bolus insulin input for the whole replay simulation, 'basal' (U/min) a vector that contains the basal insulin input for the whole replay simulation, 'time' (datetime) a vector that contains the time istants of current replay simulation, 'timeIndex' is a number that defines the current time istant in the replay simulation. Vectors contain one value for each integration step. The default policy, implemented by the function 'adaHypoTreatmentHandler', is \"take an hypotreatment of 10 g every 15 minutes while in hypoglycemia\";")]),t._v(" "),a("li",[a("strong",[t._v("enableCorrectionBoluses: integer, {0, 1}, default: 0")]),t._v(" "),a("br"),t._v("\nA numerical flag that specifies whether to enable correction boluses during the replay of a given scenario. Can be set only when "),a("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),a("li",[a("strong",[t._v("correctionBolusesHandler: vector of char, default:   'correctsAbove250Handler'")]),t._v(" "),a("br"),t._v("\nA vector of characters that specifies the ame of the function handler that implements a corrective bolusing strategy during the replay of a given scenario. The function must have 1 output, i.e., the correction insulin bolus (U/min). The function must accept 6 inputs, i.e., 'G' (mg/dl) the glucose concentration at time(timeIndex), 'CHO' (g/min) a vector that contains the CHO intakes input for the whole replay simulation, 'bolus' (U/min) a vector that contains the bolus insulin input for the whole replay simulation, 'basal' (U/min) a vector that contains the basal insulin input for the whole replay simulation, 'time' (datetime) a vector that contains the time istants of current replay simulation, 'timeIndex' is a number that defines the current time istant in the replay simulation. Vectors contain one value for each integration step. The default policy, implemented by the function 'correctsAbove250Handler', is \"take a corrective bolus of 1 U every 1 hour while above 250 mg/dl\";")]),t._v(" "),a("li",[a("strong",[t._v("saveSuffix: vector of characters, default: ''")]),t._v(" "),a("br"),t._v("\nA vector of char to be attached as suffix to the resulting output files' name;")]),t._v(" "),a("li",[a("strong",[t._v("plotMode: integer, {0, 1}, default: 1")]),t._v(" "),a("br"),t._v("\nA numerical flag that specifies whether to show the plot of the results or not;")]),t._v(" "),a("li",[a("strong",[t._v("enableLog: integer, {0, 1}, default: 1")]),t._v(" "),a("br"),t._v("\nA numerical flag that specifies whether to log the output of ReplayBG not;")]),t._v(" "),a("li",[a("strong",[t._v("verbose: integer, {0, 1}, default: 1")]),t._v(" "),a("br"),t._v("\nA numerical flag that specifies the verbosity of ReplayBG.")])]),t._v(" "),a("h3",{attrs:{id:"results"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#results"}},[t._v("#")]),t._v(" Results")]),t._v(" "),a("p",[t._v("Results are saved in the "),a("strong",[t._v("results/")]),t._v(" folder, specifically:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("results/distributions/")]),t._v(": contains the identified ReplayBG model parameter distributions obtained via MCMC;")]),t._v(" "),a("li",[a("strong",[t._v("results/logs/")]),t._v(": contains .txt files that log the command window output of ReplayBG. Of note, .txt files will be empty if verbose = 0;")]),t._v(" "),a("li",[a("strong",[t._v("results/mcmcChains/")]),t._v(": if "),a("strong",[t._v("saveChains = 1")]),t._v(", contains the MCMC chains, for each unknown parameter, obtained in each MCMC run;")]),t._v(" "),a("li",[a("strong",[t._v("results/modelParameters/")]),t._v(": contains the model parameters identified using MCMC. Known model parameters are fixed to population values obtained from the literature. Unknown model parameters are pointly estimated using the estimator specified by "),a("strong",[t._v("bayesianEstimator")]),t._v(";")]),t._v(" "),a("li",[a("strong",[t._v("results/workspaces/")]),t._v(": contains the core ReplayBG variables and data used in a specific ReplayBG call.")])]),t._v(" "),a("h2",{attrs:{id:"note-on-the-function-handlers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#note-on-the-function-handlers"}},[t._v("#")]),t._v(" Note on the function handlers")]),t._v(" "),a("ul",[a("li",[t._v("Integration step is 1 minute. Function handlers of the integrated\ndecision support systems works at this time step. So, input vectors of\nthe function handlers contain one value for each integration step.")])])])}),[],!1,null,null,null);e.default=s.exports}}]);