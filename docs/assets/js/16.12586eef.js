(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{366:function(t,a,e){"use strict";e.r(a);var s=e(42),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"replaybg-input-validators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#replaybg-input-validators"}},[t._v("#")]),t._v(" ReplayBG Input Validators")]),t._v(" "),e("h2",{attrs:{id:"modalityvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modalityvalidator"}},[t._v("#")]),t._v(" modalityValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("modalityValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("modality")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"input"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input"}},[t._v("#")]),t._v(" Input")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"datavalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#datavalidator"}},[t._v("#")]),t._v(" dataValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dataValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("data")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"input-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-2"}},[t._v("#")]),t._v(" Input")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("data: timetable, (required)")]),t._v(" "),e("br"),t._v("\nA timetable which contains the data to be used by ReplayBG.")])]),t._v(" "),e("h3",{attrs:{id:"output-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-2"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"bwvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bwvalidator"}},[t._v("#")]),t._v(" BWValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("BWValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BW"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("BW")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"input-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-3"}},[t._v("#")]),t._v(" Input")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("BW: double, (required)")]),t._v(" "),e("br"),t._v("\nThe patient body weight (kg).")])]),t._v(" "),e("h3",{attrs:{id:"output-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-3"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"savenamevalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#savenamevalidator"}},[t._v("#")]),t._v(" saveNameValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("saveNameValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("saveName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("saveName")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"input-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-4"}},[t._v("#")]),t._v(" Input")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("saveName: vector of char, (required)")]),t._v(" "),e("br"),t._v("\nA vector of characters used to label, thus identify, each output file and result.")])]),t._v(" "),e("h3",{attrs:{id:"output-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-4"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"glucosemodelvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#glucosemodelvalidator"}},[t._v("#")]),t._v(" glucoseModelValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("glucoseModelValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("glucoseModel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("glucoseModel")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"input-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-5"}},[t._v("#")]),t._v(" Input")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("glucoseModel: vector of char, {'BG', 'IG'}, default: 'IG'")]),t._v(" "),e("br"),t._v("\nA vector of characters that specifies the glucose model to use.")])]),t._v(" "),e("h3",{attrs:{id:"output-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-5"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"sampletimevalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sampletimevalidator"}},[t._v("#")]),t._v(" sampleTimeValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sampleTimeValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("sampleTime"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("sampleTime")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"input-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-6"}},[t._v("#")]),t._v(" Input")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("sampleTime: integer, default: 5")]),t._v(" "),e("br"),t._v("\nAn integer that specifies the sample time (min) of the "),e("strong",[t._v("data")]),t._v(" timetable.")])]),t._v(" "),e("h3",{attrs:{id:"output-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-6"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"seedvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#seedvalidator"}},[t._v("#")]),t._v(" seedValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("seedValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("seed"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("seed")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"input-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-7"}},[t._v("#")]),t._v(" Input")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("seed: integer, default: randi([1 1048576])")]),t._v(" "),e("br"),t._v("\nAn integer that specifies the random seed. For reproducibility.")])]),t._v(" "),e("h3",{attrs:{id:"output-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-7"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"maxetapermcmcrunvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maxetapermcmcrunvalidator"}},[t._v("#")]),t._v(" maxETAPerMCMCRunValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxETAPerMCMCRunValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxETAPerMCMCRun"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("maxETAPerMCMCRun")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("maxETAPerMCMCRun: double, default: inf")]),t._v(" "),e("br"),t._v("\nA number that specifies the maximum time (hour) allowed for each MCMC run. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay'. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-8"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"maxmcmciterationsvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maxmcmciterationsvalidator"}},[t._v("#")]),t._v(" maxMCMCIterationsValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxMCMCIterationsValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxMCMCIterations"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("maxMCMCIterations")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-2"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("maxMCMCIterations: integer, default: inf")]),t._v(" "),e("br"),t._v("\nAn integer that specifies the maximum number of iterations for each MCMC run. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay'. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-9"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"maxmcmcrunsvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maxmcmcrunsvalidator"}},[t._v("#")]),t._v(" maxMCMCRunsValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxMCMCRunsValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxMCMCRuns"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("maxMCMCRuns")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-3"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("maxMCMCRuns: integer, default: inf")]),t._v(" "),e("br"),t._v("\nAn integer that specifies the maximum number of MCMC runs. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay'. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-10"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"maxmcmcrunswithmaxetavalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#maxmcmcrunswithmaxetavalidator"}},[t._v("#")]),t._v(" maxMCMCRunsWithMaxETAValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxMCMCRunsWithMaxETAValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("maxMCMCRunsWithMaxETA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("maxMCMCRunsWithMaxETA")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-4"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("maxMCMCRunsWithMaxETA: integer, default: 2")]),t._v(" "),e("br"),t._v("\nAn integer that specifies the maximum number of MCMC runs having maximum ETA. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay'. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-11"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-11"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"mcmctheta0validator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mcmctheta0validator"}},[t._v("#")]),t._v(" MCMCTheta0Validator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("MCMCTheta0PolicyValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MCMCTheta0Policy"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("MCMCTheta0Policy")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-5"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("MCMCTheta0Policy: vector of char, {'mean', 'initial', 'last'}, default: 'mean'")]),t._v(" "),e("br"),t._v("\nA vector of characters defining the policy used by the MCMC procedure to set the initial MCMC chain values. Using 'mean', the mean value of the MCMC chain obtained from the last MCMC run will be set as initial MCMC chain value to be used in the next MCMC run. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-12"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-12"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"bayesianestimatorvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bayesianestimatorvalidator"}},[t._v("#")]),t._v(" bayesianEstimatorValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("bayesianEstimatorValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bayesianEstimator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("bayesianEstimator")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-6"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("bayesianEstimator: vector of char, {'mean', 'map'}, default: 'mean'")]),t._v(" "),e("br"),t._v("\nA vector of characters defining which Bayesian estimator to use to obtain a point estimate of model parameters. Using 'mean' the posterior mean estimater will be used. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-13"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-13"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"prefilterdatavalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prefilterdatavalidator"}},[t._v("#")]),t._v(" preFilterDataValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("preFilterDataValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("preFilterData"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("preFilterData")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-7"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-7"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("preFilterData: integer, {0, 1}, default: 0")]),t._v(" "),e("br"),t._v("\nA numerical flag that specifies whether to filter the glucose data before performing the model identification or not. This might help the identification procedure. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-14"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-14"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"savechainsvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#savechainsvalidator"}},[t._v("#")]),t._v(" saveChainsValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("saveChainsValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("saveChains"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("saveChains")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-8"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-8"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("saveChains: integer, {0, 1}, default: 1")]),t._v(" "),e("br"),t._v("\nA numerical flag that specifies whether to save the resulting MCMC chains in dedicated files (one for each MCMC run) for future analysis or not. Ignored when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-15"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-15"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"enablehypotreatmentsvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enablehypotreatmentsvalidator"}},[t._v("#")]),t._v(" enableHypoTreatmentsValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("enableHypoTreatmentsValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enableHypoTreatments"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("enableHypoTreatments")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-9"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-9"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("enableHypoTreatments: integer, {0, 1}, default: 0")]),t._v(" "),e("br"),t._v("\nA numerical flag that specifies whether to enable hypotreatments during the replay of a given scenario. Can be set only when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-16"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-16"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"hypotreatmentshandlervalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hypotreatmentshandlervalidator"}},[t._v("#")]),t._v(" hypoTreatmentsHandlerValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hypoTreatmentsHandlerValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hypoTreatmentsHandler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input function handler "),e("strong",[t._v("hypoTreatmentsHandler")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-10"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-10"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("hypoTreatmentsHandler: vector of char, default: 'adaHypoTreatmentsHandler'")]),t._v(" "),e("br"),t._v("\nA vector of characters that specifies the name of the function handler that implements an hypotreatment strategy during the replay of a given scenario;")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-17"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-17"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"enablecorrectionbolusesvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enablecorrectionbolusesvalidator"}},[t._v("#")]),t._v(" enableCorrectionBolusesValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("enableCorrectionBolusesValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enableCorrectionBoluses"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("enableCorrectionBoluses")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-11"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-11"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("enableCorrectionBoluses: integer, {0, 1}, default: 0")]),t._v(" "),e("br"),t._v("\nA numerical flag that specifies whether to enable correction boluses during the replay of a given scenario. Can be set only when "),e("strong",[t._v("modality")]),t._v(" is 'replay';")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-18"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-18"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"correctionboluseshandlervalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#correctionboluseshandlervalidator"}},[t._v("#")]),t._v(" correctionBolusesHandlerValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("correctionBolusesHandlerValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("correctionBolusesHandler"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("modality"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input function handlers "),e("strong",[t._v("correctionBolusesHandler")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-12"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-12"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("correctionBolusesHandler: vector of char, default: 'correctsAbove250Handler'")]),t._v(" "),e("br"),t._v("\nA vector of characters that specifies the ame of the function handler that implements a corrective bolusing strategy during the replay of a given scenario;")]),t._v(" "),e("li",[e("strong",[t._v("modality: vector of char, {'identification', 'replay'} (required)")]),t._v(" "),e("br"),t._v("\nSpecifies if the function will be used to identify the ReplayBG model on the given data\nor to replay the scenario specified by the given data.")])]),t._v(" "),e("h3",{attrs:{id:"output-19"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-19"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"savesuffixvalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#savesuffixvalidator"}},[t._v("#")]),t._v(" saveSuffixValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("saveSuffixValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("saveSuffix"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("saveSuffix")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-13"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-13"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("saveSuffix: vector of characters, default: ''")]),t._v(" "),e("br"),t._v("\nA vector of char to be attached as suffix to the resulting output files' name.")])]),t._v(" "),e("h3",{attrs:{id:"output-20"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-20"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"plotmodevalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plotmodevalidator"}},[t._v("#")]),t._v(" plotModeValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("plotModeValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("plotMode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("plotMode")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-14"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-14"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("plotMode: integer, {0, 1}, default: 1")]),t._v(" "),e("br"),t._v("\nA numerical flag that specifies whether to show the plot of the results or not.")])]),t._v(" "),e("h3",{attrs:{id:"output-21"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-21"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])]),t._v(" "),e("h2",{attrs:{id:"verbosevalidator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#verbosevalidator"}},[t._v("#")]),t._v(" verboseValidator")]),t._v(" "),e("div",{staticClass:"language-MATLAB extra-class"},[e("pre",{pre:!0,attrs:{class:"language-matlab"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" valid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("verboseValidator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("verbose"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Validates the input parameter "),e("strong",[t._v("verbose")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inputs-15"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inputs-15"}},[t._v("#")]),t._v(" Inputs")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("verbose: integer, {0, 1}, default: 1")]),t._v(" "),e("br"),t._v("\nA numerical flag that specifies the verbosity of ReplayBG.")])]),t._v(" "),e("h3",{attrs:{id:"output-22"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-22"}},[t._v("#")]),t._v(" Output")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("valid: boolean")]),t._v(" "),e("br"),t._v("\nA boolean defining if the input parameter is valid.")])])])}),[],!1,null,null,null);a.default=r.exports}}]);